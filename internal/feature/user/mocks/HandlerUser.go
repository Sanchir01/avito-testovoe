// Code generated by mockery v2.52.2. DO NOT EDIT.

package mocks

import (
	context "context"

	user "github.com/Sanchir01/avito-testovoe/internal/feature/user"
	mock "github.com/stretchr/testify/mock"

	uuid "github.com/google/uuid"
)

// HandlerUser is an autogenerated mock type for the HandlerUser type
type HandlerUser struct {
	mock.Mock
}

// Auth provides a mock function with given fields: ctx, email, password
func (_m *HandlerUser) Auth(ctx context.Context, email string, password string) (string, error) {
	ret := _m.Called(ctx, email, password)

	if len(ret) == 0 {
		panic("no return value specified for Auth")
	}

	var r0 string
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string, string) (string, error)); ok {
		return rf(ctx, email, password)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, string) string); ok {
		r0 = rf(ctx, email, password)
	} else {
		r0 = ret.Get(0).(string)
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, string) error); ok {
		r1 = rf(ctx, email, password)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// BuyProduct provides a mock function with given fields: ctx, userID, productID
func (_m *HandlerUser) BuyProduct(ctx context.Context, userID uuid.UUID, productID uuid.UUID) error {
	ret := _m.Called(ctx, userID, productID)

	if len(ret) == 0 {
		panic("no return value specified for BuyProduct")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, uuid.UUID, uuid.UUID) error); ok {
		r0 = rf(ctx, userID, productID)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// GetAllUserCoinsInfo provides a mock function with given fields: ctx, userID
func (_m *HandlerUser) GetAllUserCoinsInfo(ctx context.Context, userID uuid.UUID) (*user.GetAllUserCoinsInfo, error) {
	ret := _m.Called(ctx, userID)

	if len(ret) == 0 {
		panic("no return value specified for GetAllUserCoinsInfo")
	}

	var r0 *user.GetAllUserCoinsInfo
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, uuid.UUID) (*user.GetAllUserCoinsInfo, error)); ok {
		return rf(ctx, userID)
	}
	if rf, ok := ret.Get(0).(func(context.Context, uuid.UUID) *user.GetAllUserCoinsInfo); ok {
		r0 = rf(ctx, userID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*user.GetAllUserCoinsInfo)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, uuid.UUID) error); ok {
		r1 = rf(ctx, userID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// SendCoins provides a mock function with given fields: ctx, userID, senderEmail, amount
func (_m *HandlerUser) SendCoins(ctx context.Context, userID uuid.UUID, senderEmail string, amount int64) error {
	ret := _m.Called(ctx, userID, senderEmail, amount)

	if len(ret) == 0 {
		panic("no return value specified for SendCoins")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, uuid.UUID, string, int64) error); ok {
		r0 = rf(ctx, userID, senderEmail, amount)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// NewHandlerUser creates a new instance of HandlerUser. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewHandlerUser(t interface {
	mock.TestingT
	Cleanup(func())
}) *HandlerUser {
	mock := &HandlerUser{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
