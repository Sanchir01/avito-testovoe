// Code generated by mockery v2.52.2. DO NOT EDIT.

package mocks

import (
	context "context"

	product "github.com/Sanchir01/avito-testovoe/internal/feature/product"
	mock "github.com/stretchr/testify/mock"

	uuid "github.com/google/uuid"
)

// HandlerProducts is an autogenerated mock type for the HandlerProducts type
type HandlerProducts struct {
	mock.Mock
}

// GetAllProducts provides a mock function with given fields: ctx
func (_m *HandlerProducts) GetAllProducts(ctx context.Context) ([]*product.DataBaseProduct, error) {
	ret := _m.Called(ctx)

	if len(ret) == 0 {
		panic("no return value specified for GetAllProducts")
	}

	var r0 []*product.DataBaseProduct
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context) ([]*product.DataBaseProduct, error)); ok {
		return rf(ctx)
	}
	if rf, ok := ret.Get(0).(func(context.Context) []*product.DataBaseProduct); ok {
		r0 = rf(ctx)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*product.DataBaseProduct)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context) error); ok {
		r1 = rf(ctx)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetProductByID provides a mock function with given fields: ctx, id
func (_m *HandlerProducts) GetProductByID(ctx context.Context, id uuid.UUID) (*product.DataBaseProduct, error) {
	ret := _m.Called(ctx, id)

	if len(ret) == 0 {
		panic("no return value specified for GetProductByID")
	}

	var r0 *product.DataBaseProduct
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, uuid.UUID) (*product.DataBaseProduct, error)); ok {
		return rf(ctx, id)
	}
	if rf, ok := ret.Get(0).(func(context.Context, uuid.UUID) *product.DataBaseProduct); ok {
		r0 = rf(ctx, id)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*product.DataBaseProduct)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, uuid.UUID) error); ok {
		r1 = rf(ctx, id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// NewHandlerProducts creates a new instance of HandlerProducts. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewHandlerProducts(t interface {
	mock.TestingT
	Cleanup(func())
}) *HandlerProducts {
	mock := &HandlerProducts{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
